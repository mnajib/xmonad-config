#!/usr/bin/env bash

#
#  Get waktu solat formated to be use by xmobar
#
#  by Muhammad Najib Bin Ibrahim <mnajib@gmail.com>
#
#  Usage:
#      waktusolat-cli <ZON_CODE>
#
#  Example:
#      waktusolat-cli SGR01
#      waktusolat-cli WLY01
#      waktusolat-cli MLK01
#      waktusolat-cli TRG01
#

# Fail fast.
# The set command changes script execution options.
# For example, normally Bash does not care if some command failed, returning a non-zero exit status code. It just happily jumps to the next one.
set -Eeuo pipefail

# Get the location
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

# Display helpful help
usageTest() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] [-p param_value] -z JAKIMZONECODE arg1 [arg2...]

Script description here.

EOF
    exit
}

usage() {
    cat <<EOF
Papar waktu solat berdasarkan kod zone kawasan.

Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] ZONE
where  ZONE := { SGR01 | SGR02 | WLY01 | MLK01 | TRG01 }

EOF
    exit
}

# Try to clean up
trap cleanup SIGINT SIGTERM ERR EXIT
#
# Think about the trap like of a finally block for the script.
# At the end of the script – normal, caused by an error or an external signal – the cleanup() function will be executed.
# This is a place where you can, for example, try to remove all temporary files created by the script.
# Just remember that the cleanup() can be called not only at the end but as well having
# the script done any part of the work. Not necessarily all the resources you try to cleanup will exist.
cleanup() {
        trap - SIGINT SIGTERM ERR EXIT
        # script cleanup here
}

setup_colors() {
        if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
                NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
        else
                NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
        fi
}

msg() {
        echo >&2 -e "${1-}"
}

die() {
        local msg=$1
        local code=${2-1} # default exit status 1
        msg "$msg"
        exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''
  zone=''

  while :; do
        case "${1-}" in
            -h | --help) usage ;;
            -v | --verbose) set -x ;;
            --no-color) NO_COLOR=1 ;;
            -f | --flag) flag=1 ;; # example flag
            -p | --param) # example named parameter
                param="${2-}"
                shift
                ;;
            -z | --zone) # Code ZONE Jakim
                zone="${2-}"
                shift
                ;;
            -?*) die "Unknown option: $1" ;;
              *) break ;;
        esac
        shift
  done

  args=("$@")

  # check required params and arguments
  #[[ -z "${param-}" ]] && die "Missing required parameter: param"
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

parse_params "$@"
setup_colors

#msg "${RED}Read parameters:${NOFORMAT}"
#msg "- flag: ${flag}"
#msg "- param: ${param}"
#msg "- zone: ${zone}"
#msg "- arguments: ${args[*]-}"
#msg "- \$1: ${1}"
#msg "- \$2: ${2}"
#msg "- \$3: ${3}"

# source FILE
. waktusolatlib.sh

FILE1=/tmp/${USER}-wsp1         # source data file
FILE2=/tmp/${USER}-wsp2         # one-line result waktu solat formated for xmobar
FILE3=/tmp/${USER}-wsp1.bak     # backup good source data file
LOG=/tmp/${USER}-wsp.log        # for logging

zone=$1

ERROR=false
ONELINE=""
NAMASOLAT=()
MASASOLAT=()

KAWASAN=""
ZON="" #"$1" #"SGR01" # WLY01 MLK01 TRG01
BEARING=""
TITLE=""
HDATE=""
MDATE=""
MDATETIME=""
DAY=""
STATUS=""
HMONTHFULLNAME=""
MMONTHFULLNAME=""

LOGMODE="NORMAL"
#LOGMODE="DEBUG"

#----------------------------------------------------------------------

log INFO "==============================="
log INFO "Start waktusolat-cli"

timeInterval1=`echo "60 * 60 * 6" | bc` # every 6 hours
timeInterval2=`echo "60 * 1" | bc` # every 1 minutes; used this if last fetch was failed
timeInterval=${timeInterval1}

done=0
while : ; do
    log DEBUG "-------------------------------"
    log DEBUG "`date` : Start main loop"

    ## Note:
    ##waktu=`~/.xmonad/waktusolat-putrajaya-hbar`
    ##echo -en "$waktu\n" # <-- may need '\n"

    resetData

    #fetchData
    fetchDataZone $zone #SGR01
    #simulateFetchData
    #simulateFailFetchData
    #setBlankDataToArray # may need revise

    extractData
    checkData
    log DEBUG "ERROR --> ${ERROR}"

    if $ERROR; then
        resetData
        log DEBUG "Decrease fetch time interval"
        timeInterval=${timeInterval2}

        log INFO "Getting old backup data"
        getOldGoodFetchData
        extractData

        #echo "Start setup blank data" >> $LOG
        #setBlankDataToArray

        #printEmptyWaktuSolat  # just for testing
        #printOldWaktuSolat    # just for testing
    else
        log DEBUG "Do backup and reset fetch time interval"
        doBackup
        timeInterval=${timeInterval1}

        done=1 # no loop, just run until can fetch from internet; exit from while loop
    fi

    # TODO: Maybe will get option to print for plain text only, for CLI
    #
    # Usage:
    #     waktusolat-putrajaya-hbar
    #     waktusolat-putrajaya-hbar cli
    #     waktusolat-putrajaya-hbar xmobar
    #
    #printWaktuSolatForCliType1
    #echo ""
    #printWaktuSolatForCliType2
    #echo ""
    printWaktuSolatForCliType3

    # exit from while loop
    if [ "$done" -ne 0 ]; then
        break
    fi

    # XXX: TODO: Sleep interval mayneed change base on if ERROR occour
    # if ERROR ; then
    # ...
    log DEBUG "Do sleep for ${timeInterval}"
    sleep ${timeInterval}

    log DEBUG "End main loop"
done

log DEBUG "End waktusolat-cli"
